<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">
        
        
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
    
    <context:component-scan base-package="com.huoyushi.MyOrderServer.Service"></context:component-scan>
	<context:component-scan base-package="com.huoyushi.MyOrderServer.DAO"></context:component-scan>
	<context:component-scan base-package="aspect"></context:component-scan>
	
  <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/> 
  
  
   <bean id="applicationContext"
        class="org.apache.axis2.extensions.spring.receivers.ApplicationContextHolder"/>
        

 <!-- activemq 配置 -->
 
 
<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">  
        <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->  
        <property name="connectionFactory" ref="connectionFactory"/> 
 </bean>  
      
    <!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供-->  
    <bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">  
        <property name="brokerURL" value="tcp://localhost:61616"/>  
    </bean>  
      
    <!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->  
    <bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">  
        <!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->  
        <property name="targetConnectionFactory" ref="targetConnectionFactory"/>  
    </bean>  
      
    <!--这个是队列目的地-->  
    <bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">  
        <constructor-arg index="0" value="registerqueue"/>  
    </bean>
    <bean id="orderDestination" class="org.apache.activemq.command.ActiveMQQueue">  
        <constructor-arg index="0" value="orderrqueue"/>
    </bean>
    <!-- 消息监听器 -->  
       <bean id="consumerMessageListener" class="com.huoyushi.jms.ConsumerMessageListener"/>
    <!-- 消息监听容器 -->   
     <bean id="jmsContainer"  
        class="org.springframework.jms.listener.DefaultMessageListenerContainer">  
        <property name="connectionFactory" ref="connectionFactory" />  
        <property name="destination" ref="orderDestination" />  
        <property name="messageListener" ref="consumerMessageListener" />  
    </bean>
 <bean id="RegisterProducer" class="com.huoyushi.jms.RegisterProducer">  
        <!-- 消息生产者-->  
        <property name="jmsTemplate" ref="jmsTemplate"/>
 </bean> 
 
  <bean id="OrderProducer" class="com.huoyushi.jms.OrderProducer">  
        <!-- 消息生产者-->  
        <property name="jmsTemplate" ref="jmsTemplate"/>
 </bean> 
 
  <bean id="RegisterConsumer" class="com.huoyushi.jms.RegisterConsumer">  
        <!-- 消息生产者-->  
        <property name="jmsTemplate" ref="jmsTemplate"/>
 </bean> 
 
 <bean id="ds" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
		<property name="url" value="jdbc:mysql://localhost:3306/foods"></property>
		<property name="password" value="heminqi1992"></property>
		<property name="username" value="root"></property>
	</bean>

		<!--
		指定实现JPA的适配器，主要作用如下：
		1、取代persistence.xml中的<provider>
		2、指定方言
		3、通知“entityManagerFactory”产生什么样的entityManager
		4、还可以使用EclipseLinkJpaVendorAdapter(Toplink)，openJpaVendorAdapter
	 -->
	<bean id="hibernateJpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="databasePlatform" value="org.hibernate.dialect.MySQLDialect" />
	</bean>
	
	<!-- JPA实体管理工厂的配置 使用@PersistenceContext会自动注入EntityManager,可以使用 @PersistenceUnit注入entityManagerFactory -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="ds" />
		<property name="persistenceUnitName" value="persitentunit"></property>
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" />
		<property name="packagesToScan" value="com.huoyushi.MyOrderServer.Entity" /><!--待扫描的实体类包，不再需要persistence.xml了 -->
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
	</bean>
 

	<!-- Jpa 事务配置 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
	<!-- Spring Data Jpa配置 -->
	<!-- <jpa:repositories base-package="dao.impl" transaction-manager-ref="transactionManager" 
		entity-manager-factory-ref="entityManagerFactory"/> -->
	
	<!-- 
		对使用@Transactional的方法启用AOP
		proxy-target-class:表示是否对“目标类”启用代理。true:表示使用cglib方式(类)，false:表示使用Proxy方式（接口）
	
	-->
 
<bean id="UserManagerAxisService" class="com.huoyushi.Axis2Proxy.UserManagerAxisProxy">
<property name="userManager" ref="UserManagerService" />
</bean>

<bean id="MenuManagerAxisService" class="com.huoyushi.Axis2Proxy.MenuManagerAxisProxy">
<property name="menuManager" ref="MenuManagerService" />
</bean>

<bean id="OrderManagerAxisService" class="com.huoyushi.Axis2Proxy.OrderManagerAxisProxy">
<property name="orderManager" ref="OrderManagerService" />
</bean>


	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />


</beans>